"use strict";(self.webpackChunkonekey_document=self.webpackChunkonekey_document||[]).push([[9665],{4754:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return s},default:function(){return d}});var i=t(7462),a=t(3366),l=(t(7294),t(3905)),r=t(9216),o={hide_table_of_contents:!0},p=void 0,c={unversionedId:"Connect/Method List/getPublicKey",id:"Connect/Method List/getPublicKey",isDocsHomePage:!1,title:"getPublicKey",description:"Get public key",source:"@site/docs/Connect/Method List/getPublicKey.mdx",sourceDirName:"Connect/Method List",slug:"/Connect/Method List/getPublicKey",permalink:"/en/Connect/Method List/getPublicKey",editUrl:"https://github.com/onekeyhq/documents/edit/main/docs/Connect/Method List/getPublicKey.mdx",version:"current",frontMatter:{hide_table_of_contents:!0},sidebar:"ConnectSidebar",previous:{title:"getCoinInfo",permalink:"/en/Connect/Method List/getCoinInfo"},next:{title:"liskGetAddress",permalink:"/en/Connect/Method List/liskGetAddress"}},s=[{value:"Get public key",id:"get-public-key",children:[{value:"Params",id:"params",children:[]},{value:"Example",id:"example",children:[]},{value:"Result",id:"result",children:[]}]}],u={toc:s};function d(e){var n=e.components,t=(0,a.Z)(e,["components"]);return(0,l.kt)("wrapper",(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"get-public-key"},"Get public key"),(0,l.kt)("p",null,"Retrieves BIP32 extended public derived by given BIP32 path.\nUser is presented with a description of the requested key and asked to confirm the export."),(0,l.kt)("p",null,"ES6"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const result = await OneKeyConnect.getPublicKey(params);\n")),(0,l.kt)("p",null,"CommonJS"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"OneKeyConnect.getPublicKey(params).then(function(result) {\n\n});\n")),(0,l.kt)("h3",{id:"params"},"Params"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"./commonParams"},(0,l.kt)("strong",{parentName:"a"},"Optional common params"))),(0,l.kt)("h4",{id:"exporting-single-public-key"},"Exporting single public key"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"path")," \u2014 ",(0,l.kt)("em",{parentName:"li"},"required")," ",(0,l.kt)("inlineCode",{parentName:"li"},"string | Array<number>")," minimum length is ",(0,l.kt)("inlineCode",{parentName:"li"},"1"),". ",(0,l.kt)("a",{parentName:"li",href:"./path"},"read more")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"coin")," - ",(0,l.kt)("em",{parentName:"li"},"optional")," ",(0,l.kt)("inlineCode",{parentName:"li"},"string")," determines network definition specified in ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/OneKeyHQ/connect/blob/onekey/src/data/coins.json"},"coins.json")," file. Coin ",(0,l.kt)("inlineCode",{parentName:"li"},"shortcut"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"name")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"label")," can be used. If ",(0,l.kt)("inlineCode",{parentName:"li"},"coin")," is not set API will try to get network definition from ",(0,l.kt)("inlineCode",{parentName:"li"},"path"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"crossChain")," \u2014 ",(0,l.kt)("em",{parentName:"li"},"optional")," ",(0,l.kt)("inlineCode",{parentName:"li"},"boolean")," Advanced feature. Use it only if you are know what you are doing. Allows to generate address between chains. For example Bitcoin path on Litecoin network will display cross chain address in Litecoin format.")),(0,l.kt)("h4",{id:"exporting-bundle-of-public-keys"},"Exporting bundle of public keys"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"bundle")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"Array")," of Objects with ",(0,l.kt)("inlineCode",{parentName:"li"},"path"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"coin")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"crossChain")," fields")),(0,l.kt)("h3",{id:"example"},"Example"),(0,l.kt)("p",null,"Return public key of fifth bitcoin account:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'OneKeyConnect.getPublicKey({\n    path: "m/49\'/0\'/4\'",\n    coin: "btc"\n});\n')),(0,l.kt)("p",null,"Return a bundle of public keys for multiple bitcoin accounts:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"OneKeyConnect.getPublicKey({\n    bundle: [\n        { path: \"m/49'/0'/0'\" }, // account 1\n        { path: \"m/49'/0'/1'\" }, // account 2\n        { path: \"m/49'/0'/2'\" }  // account 3\n    ]\n});\n")),(0,l.kt)("h3",{id:"result"},"Result"),(0,l.kt)("p",null,"Result with only one public key"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"{\n    success: true,\n    payload: {\n        path: Array<number>, // hardended path\n        serializedPath: string, // serialized path\n        xpub: string,        // xpub in legacy format\n        xpubSegwit?: string, // optional for segwit accounts: xpub in segwit format\n        chainCode: string,   // BIP32 serialization format\n        childNum: number,    // BIP32 serialization format\n        publicKey: string,   // BIP32 serialization format\n        fingerprint: number, // BIP32 serialization format\n        depth: number,       // BIP32 serialization format\n    }\n}\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#Serialization_format"},"Read more about BIP32 serialization format")),(0,l.kt)("p",null,"Result with bundle of public keys"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"{\n    success: true,\n    payload: [\n        { path, serializedPath, xpub, xpubSegwit?, chainCode, childNum, publicKey, fingerprint, depth }, // account 1\n        { path, serializedPath, xpub, xpubSegwit?, chainCode, childNum, publicKey, fingerprint, depth }, // account 2\n        { path, serializedPath, xpub, xpubSegwit?, chainCode, childNum, publicKey, fingerprint, depth }  // account 3\n    ]\n}\n")),(0,l.kt)("p",null,"Error"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"{\n    success: false,\n    payload: {\n        error: string // error message\n    }\n}\n")),(0,l.kt)(r.Z,{initValue:'OneKeyConnect.getPublicKey({\n    path: "m/49\'/0\'/4\'",\n    coin: "btc"\n});',mdxType:"Playground"}))}d.isMDXComponent=!0}}]);