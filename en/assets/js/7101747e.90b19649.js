"use strict";(self.webpackChunkonekey_document=self.webpackChunkonekey_document||[]).push([[1873],{9621:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return r},metadata:function(){return s},toc:function(){return m},default:function(){return d}});var a=n(7462),i=n(3366),o=(n(7294),n(3905)),l={hide_table_of_contents:!0,sidebar_position:2},r=void 0,s={unversionedId:"Connect/Method List/commonParams",id:"Connect/Method List/commonParams",isDocsHomePage:!1,title:"commonParams",description:"Common parameters",source:"@site/docs/Connect/Method List/commonParams.mdx",sourceDirName:"Connect/Method List",slug:"/Connect/Method List/commonParams",permalink:"/en/Connect/Method List/commonParams",editUrl:"https://github.com/onekeyhq/documents/edit/main/docs/Connect/Method List/commonParams.mdx",version:"current",sidebarPosition:2,frontMatter:{hide_table_of_contents:!0,sidebar_position:2},sidebar:"ConnectSidebar",previous:{title:"path",permalink:"/en/Connect/Method List/path"},next:{title:"bixinReboot",permalink:"/en/Connect/Method List/bixinReboot"}},m=[{value:"Common parameters",id:"common-parameters",children:[]}],p={toc:m};function d(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"common-parameters"},"Common parameters"),(0,o.kt)("p",null,"Every call require an ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"},(0,o.kt)("inlineCode",{parentName:"a"},"Object"))," with combination of common and method specified fields.\nAll common parameters are optional."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"device")," - ",(0,o.kt)("em",{parentName:"li"},"optional")," ",(0,o.kt)("inlineCode",{parentName:"li"},"Object"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"path")," - ",(0,o.kt)("em",{parentName:"li"},"required")," ",(0,o.kt)("inlineCode",{parentName:"li"},"string")," call to a direct device. Useful when working with multiple connected devices. This value is emitted by ",(0,o.kt)("a",{parentName:"li",href:"../Events"},(0,o.kt)("inlineCode",{parentName:"a"},"OneKeyConnectEvent"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"state")," - ",(0,o.kt)("em",{parentName:"li"},"optional")," ",(0,o.kt)("inlineCode",{parentName:"li"},"string")," sets expected state. This value is emitted by ",(0,o.kt)("a",{parentName:"li",href:"../Events"},(0,o.kt)("inlineCode",{parentName:"a"},"OneKeyConnectEvent"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"instance")," - ",(0,o.kt)("em",{parentName:"li"},"optional")," ",(0,o.kt)("inlineCode",{parentName:"li"},"number")," sets an instance of device. Useful when working with one device and multiple passphrases. This value is emitted by ",(0,o.kt)("a",{parentName:"li",href:"../Events"},(0,o.kt)("inlineCode",{parentName:"a"},"OneKeyConnectEvent"))))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"useEmptyPassphrase")," \u2014 ",(0,o.kt)("em",{parentName:"li"},"optional")," ",(0,o.kt)("inlineCode",{parentName:"li"},"boolean")," method will not ask for a passphrase. Default is set to ",(0,o.kt)("inlineCode",{parentName:"li"},"false")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"allowSeedlessDevice")," \u2014 ",(0,o.kt)("em",{parentName:"li"},"optional")," ",(0,o.kt)("inlineCode",{parentName:"li"},"boolean")," allows to use OneKeyConnect methods with device with seedless setup. Default is set to ",(0,o.kt)("inlineCode",{parentName:"li"},"false")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"keepSession")," \u2014 ",(0,o.kt)("inlineCode",{parentName:"li"},"optional boolean")," Advanced feature. After method return a response device session will NOT! be released. Session shoul be released after all calls are performed by calling any method with ",(0,o.kt)("inlineCode",{parentName:"li"},"keepSession")," set to false or ",(0,o.kt)("inlineCode",{parentName:"li"},"undefined"),". Useful when you need to do multiple different calls to OneKeyConnect API without releasing. Example sequence loop for 10 account should look like:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'OneKeyConnect.getPublicKey({ device: { path: "web01"}, keepSession: true, ...otherParams })')," for first account,"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'OneKey.getAddress({ device: { path: "web01"}, ...otherParams })')," for the same account,"),(0,o.kt)("li",{parentName:"ul"},"looking up for balance in external blockchain"),(0,o.kt)("li",{parentName:"ul"},"loop iteration"),(0,o.kt)("li",{parentName:"ul"},"after last iteration call ",(0,o.kt)("inlineCode",{parentName:"li"},'OneKeyConnect.getFeatures({ device: { path: "web01"}, keepSession: false, ...otherParams })'))))))}d.isMDXComponent=!0}}]);